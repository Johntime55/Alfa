using System;
using System.Linq;
using System.Web.Mvc;
using MyLibrary.Models;
using System.Data.Entity;
using System.Net;
using MyLibrary.ADClasses;

namespace MyLibrary.Controllers
{
    public class BorrowBookController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        public ActionResult MyBorrowedBooks()
        {
            if (user.isLoggedIn())
            {
                var borrowedBooks = db.Barrows.ToList();
                foreach (var book in borrowedBooks)
                {
                    book.BorrowDateFormated = book.BorrowDate.HasValue
                        ? book.BorrowDate.Value.ToString("yyyy-MM-dd HH:mm:ss")
                        : "Not returned yet";
                    book.ReturnDateFormatted = book.ReturnDate.HasValue
                        ? book.ReturnDate.Value.ToString("yyyy-MM-dd HH:mm:ss")
                        : "Not returned yet";
                }
                return View(borrowedBooks);
            }
            else
            {
                return RedirectToAction("LoginPage", "Account");
            }
        }

        public ActionResult ReturnBook(int borrowedBookId)
        {
            var borrowedBook = db.Barrows.Find(borrowedBookId);
            if (borrowedBook != null)
            {
                borrowedBook.ReturnDate = DateTime.Now;
                db.SaveChanges();
            }
            return RedirectToAction("MyBorrowedBooks");
        }

        // Celelalte metode existente rămân neschimbate

        public string getUserName()
        {
            UserInfo user = new UserInfo();
            return user.getUsername();
        }
    }
}


vkiwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww

@using MyLibrary.ADClasses
@model List<MyLibrary.Models.Barrow>

<!DOCTYPE html>
<html>
<head>
    <title>My Borrowed Books</title>
</head>
<body>
    <h2>My Borrowed Books</h2>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>User Name</th>
                <th>Book Name</th>
                <th>ISBN</th>
                <th>Borrow Date</th>
                <th>Return Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model)
            {
                <tr>
                    <td>@book.BorrowedBookId</td>
                    <td>@book.UserId</td>
                    <td>@book.BookName</td>
                    <td>@book.BookISBN</td>
                    <td>@book.BorrowDateFormated</td>
                    <td>
                        @if (book.ReturnDate.HasValue)
                        {
                            @book.ReturnDateFormatted
                        }
                        else
                        {
                            <text>Not returned yet</text>
                        }
                    </td>
                    <td>
                        @if (!book.ReturnDate.HasValue && !book.IsValidated)
                        {
                            <a href="@Url.Action("ReturnBook", "BorrowBook", new { borrowedBookId = book.BorrowedBookId })" class="btn btn-primary">Return Carte</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>



waitlisttttttttttttttttttttttttttttttttttttttttttttttttt

@using MyLibrary.ADClasses
@{ var usrData = new UserInfo();}

@model List<MyLibrary.Models.Waitlist>

<!DOCTYPE html>
<html>
<head>
    <title>My WaitList</title>
</head>
<body>
    <h2>My WaitList</h2>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>User Name</th>
                <th>Book Name</th>
                <th>ISBN</th>
                <th>Registration Date</th>
                <th>Return Date</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model)
            {
                <tr>
                    <td>@book.WaitlistId</td>
                    <td>@book.UserId</td>
                    <td>@book.BookName</td>
                    <td>@book.BookISBN</td>
                    <td>@book.RegistrationDate</td>
                    <td>@book.ReturnDate</td>
                    <td>
                        @if (book.QtyAvailable > 0)
                        {
                            <a href="@Url.Action("Borrow", "BorrowBook", new { isbn13 = book.BookISBN })" class="btn btn-primary">Borrow</a>
                        }
                        else
                        {
                            <a href="@Url.Action("Join", "WaitList", new { isbn13 = book.BookISBN })" class="btn btn-success">Waitlist</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</body>
</html>




controllllllllllllllllllllllllllllllllllllllllllllllllllllllllll


using System;
using System.Linq;
using System.Web.Mvc;
using MyLibrary.Models;
using System.Data.Entity;
using System.Net;
using MyLibrary.ADClasses;

namespace MyLibrary.Controllers
{
    public class WaitListController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        // Alte metode neschimbate rămân aici

        public ActionResult Join()
        {
            ViewBag.ErrorMessage = TempData["ErrorMessage"];
            ViewBag.SuccessMessage = TempData["SuccessMessage"];
            return View();
        }

        [HttpPost]
        public ActionResult Join(string isbn13)
        {
            if (string.IsNullOrEmpty(isbn13) || isbn13.Length != 13)
            {
                TempData["ErrorMessage"] = "ISBN-13 trebuie să aibă 13 cifre.";
                return RedirectToAction("Join");
            }

            var book = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == isbn13);
            if (book == null)
            {
                TempData["ErrorMessage"] = "Cartea cu acest ISBN-13 nu există în bibliotecă.";
                return RedirectToAction("Join");
            }

            if (user.isLoggedIn())
            {
                string currentUserId = getUserName();

                if (book.QtyAvailable > 0)
                {
                    // Restul codului pentru împrumutarea cărții rămâne aici

                    return RedirectToAction("Join");
                }
                else
                {
                    TempData["ErrorMessage"] = "Cartea nu este disponibilă pentru WaitList.";
                }

                return RedirectToAction("Join");
            }
            else
            {
                return RedirectToAction("LoginPage", "Account");
            }
        }

        // Restul metodelor și codului rămân neschimbate
    }
}




/////////////////////////////



using System;
using System.Linq;
using System.Web.Mvc;
using MyLibrary.Models;
using System.Data.Entity;
using System.Net;
using MyLibrary.ADClasses;

namespace MyLibrary.Controllers
{
    public class WaitListController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        public ActionResult MyWaitList()
        {
            return View(db.Waitlists.OrderBy(p => p.WaitlistId).Distinct().ToList());
        }

        public ActionResult Join()
        {
            ViewBag.ErrorMessage = TempData["ErrorMessage"];
            ViewBag.SuccessMessage = TempData["SuccessMessage"];
            return View();
        }

        [HttpPost]
        public ActionResult Join(string isbn13)
        {
            if (string.IsNullOrEmpty(isbn13) || isbn13.Length != 13)
            {
                TempData["ErrorMessage"] = "ISBN-13 trebuie să aibă 13 cifre.";
                return RedirectToAction("Join");
            }

            var book = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == isbn13);
            if (book == null)
            {
                TempData["ErrorMessage"] = "Cartea cu acest ISBN-13 nu există în bibliotecă.";
                return RedirectToAction("Join");
            }

            if (user.isLoggedIn())
            {
                string currentUserId = getUserName();

                if (book.QtyAvailable > 0)
                {
                    book.QtyAvailable--;

                    Waitlist waitlistedBook = new Waitlist
                    {
                        UserId = currentUserId,
                        BookName = book.BookName,
                        BookISBN = book.Isbn13,
                        RegistrationDate = DateTime.Now,
                        ReturnDate = DateTime.Now.AddDays(1)
                    };
                    db.Waitlists.Add(waitlistedBook);
                    db.SaveChanges();

                    TempData["SuccessMessage"] = "Cartea a fost listată în Waitlist cu succes!";
                }
                else
                {
                    TempData["ErrorMessage"] = "Cartea nu este disponibilă pentru Waitlist.";
                }

                return RedirectToAction("Join");
            }
            else
            {
                return RedirectToAction("LoginPage", "Account");
            }
        }

        public string getUserName()
        {
            UserInfo user = new UserInfo();
            return user.getUsername();
        }

        // Metoda neschimbată
        public ActionResult ReturnBook(int WaitlistId)
        {
            var waitlistedBook = db.Waitlists.Find(WaitlistId);
            if (waitlistedBook != null)
            {
                waitlistedBook.ReturnDate = DateTime.Now;
                db.SaveChanges();
            }
            return RedirectToAction("MyWaitList");
        }

        // Restul codului rămâne neschimbat

        [HttpGet]
        public ActionResult Borrow()
        {
            ViewBag.ErrorMessage = TempData["ErrorMessage"];
            ViewBag.SuccessMessage = TempData["SuccessMessage"];
            return View();
        }

        [HttpPost]
        public ActionResult Borrow(string isbn13)
        {
            if (string.IsNullOrEmpty(isbn13) || isbn13.Length != 13)
            {
                TempData["ErrorMessage"] = "ISBN-13 trebuie să aibă 13 cifre.";
                return RedirectToAction("Borrow");
            }

            var book = db.Libraries.FirstOrDefault(b => b.Isbn13 == isbn13);
            if (book == null)
            {
                TempData["ErrorMessage"] = "Cartea cu acest ISBN-13 nu există în bibliotecă.";
                return RedirectToAction("Borrow");
            }

            if (user.isLoggedIn())
            {
                string currentUserId = getUserName();

                if (book.QtyAvailable > 0)
                {
                    book.QtyAvailable--;

                    Barrow borrowedBook = new Barrow
                    {
                        UserId = currentUserId,
                        BookName = book.BookName,
                        BookISBN = book.Isbn13,
                        BorrowDate = DateTime.Now,
                        ReturnDate = DateTime.Now.AddDays(14)
                    };

                    db.Barrows.Add(borrowedBook);
                    db.SaveChanges();

                    TempData["SuccessMessage"] = "Cartea a fost împrumutată cu succes!";
                }
                else
                {
                    TempData["ErrorMessage"] = "Cartea nu este disponibilă pentru împrumut.";
                }

                return RedirectToAction("Borrow");
            }
            else
            {
                return RedirectToAction("LoginPage", "Account");
            }
        }

        // Restul codului rămâne neschimbat

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}




/////////////////


<!DOCTYPE html>
<html>
<head>
    <!-- Alte elemente head -->

    <!-- Adăugați referința către CSS-ul Bootstrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#">Nume Bibliotecă</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <!-- Elementele de meniu pentru utilizatorii autentificați -->
                    @if (User.Identity.IsAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#">Library</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">BooksAvailables</a>
                        </li>
                        <!-- Paginile care necesită autentificare -->
                        <li class="nav-item">
                            <a class="nav-link" href="#">Borrow</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">MyBorrowedBooks</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">WaitList</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">MyWaitList</a>
                        </li>
                        <!-- Butonul pentru delogare -->
                        <li class="nav-item">
                            <a class="nav-link" href="#">Sign Out</a>
                        </li>
                    }
                    <!-- Elementele de meniu pentru utilizatorii neautentificați -->
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="#">Library</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">BooksAvailables</a>
                        </li>
                        <!-- Butonul pentru autentificare -->
                        <li class="nav-item">
                            <a class="nav-link" href="#">Sign In</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <div class="container">
        @RenderBody()
    </div>

    <!-- Adăugați referința către scripturile Bootstrap și jQuery -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
